    @Composable
    fun SettingsTab() {
        // Album art transfer settings
        var imageFormat by remember { mutableStateOf("JPEG") }
        var compressionQuality by remember { mutableStateOf(85) }
        var chunkSize by remember { mutableStateOf(512) }
        var chunkDelayMs by remember { mutableStateOf(5) }
        var useBinaryProtocol by remember { mutableStateOf(true) }
        var imageSize by remember { mutableStateOf(300) }
        
        // Load saved settings
        LaunchedEffect(Unit) {
            val prefs = getSharedPreferences("AlbumArtSettings", Context.MODE_PRIVATE)
            imageFormat = prefs.getString("imageFormat", "JPEG") ?: "JPEG"
            compressionQuality = prefs.getInt("compressionQuality", 85)
            chunkSize = prefs.getInt("chunkSize", 512)
            chunkDelayMs = prefs.getInt("chunkDelayMs", 5)
            useBinaryProtocol = prefs.getBoolean("useBinaryProtocol", true)
            imageSize = prefs.getInt("imageSize", 300)
        }
        
        // Save settings function
        fun saveSettings() {
            val prefs = getSharedPreferences("AlbumArtSettings", Context.MODE_PRIVATE)
            prefs.edit().apply {
                putString("imageFormat", imageFormat)
                putInt("compressionQuality", compressionQuality)
                putInt("chunkSize", chunkSize)
                putInt("chunkDelayMs", chunkDelayMs)
                putBoolean("useBinaryProtocol", useBinaryProtocol)
                putInt("imageSize", imageSize)
                apply()
            }
            
            // Apply settings to BLE server
            bleServerManager.updateAlbumArtSettings(
                format = imageFormat,
                quality = compressionQuality,
                chunkSize = chunkSize,
                chunkDelayMs = chunkDelayMs,
                useBinaryProtocol = useBinaryProtocol,
                imageSize = imageSize
            )
        }
        
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // Image Format Settings
            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Image Format",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        FilterChip(
                            selected = imageFormat == "JPEG",
                            onClick = { 
                                imageFormat = "JPEG"
                                saveSettings()
                            },
                            label = { Text("JPEG") },
                            modifier = Modifier.weight(1f)
                        )
                        
                        FilterChip(
                            selected = imageFormat == "WEBP",
                            onClick = { 
                                imageFormat = "WEBP"
                                saveSettings()
                            },
                            label = { Text("WebP") },
                            modifier = Modifier.weight(1f)
                        )
                        
                        FilterChip(
                            selected = imageFormat == "PNG",
                            onClick = { 
                                imageFormat = "PNG"
                                saveSettings()
                            },
                            label = { Text("PNG") },
                            modifier = Modifier.weight(1f)
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Text(
                        text = "Compression Quality: $compressionQuality%",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    
                    Slider(
                        value = compressionQuality.toFloat(),
                        onValueChange = { compressionQuality = it.toInt() },
                        valueRange = 10f..100f,
                        steps = 9,
                        modifier = Modifier.fillMaxWidth(),
                        onValueChangeFinished = { saveSettings() }
                    )
                    
                    Text(
                        text = "Image Size: ${imageSize}x${imageSize}px",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    
                    Slider(
                        value = imageSize.toFloat(),
                        onValueChange = { imageSize = it.toInt() },
                        valueRange = 100f..500f,
                        steps = 7,
                        modifier = Modifier.fillMaxWidth(),
                        onValueChangeFinished = { saveSettings() }
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Transfer Protocol Settings
            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Transfer Protocol",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Use Binary Protocol",
                            modifier = Modifier.weight(1f)
                        )
                        
                        Switch(
                            checked = useBinaryProtocol,
                            onCheckedChange = { 
                                useBinaryProtocol = it
                                saveSettings()
                            }
                        )
                    }
                    
                    Text(
                        text = if (useBinaryProtocol) "Binary protocol (faster)" else "JSON/Base64 protocol",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Text(
                        text = "Chunk Size: $chunkSize bytes",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    
                    Slider(
                        value = chunkSize.toFloat(),
                        onValueChange = { chunkSize = it.toInt() },
                        valueRange = 128f..2048f,
                        steps = 14,
                        modifier = Modifier.fillMaxWidth(),
                        onValueChangeFinished = { saveSettings() }
                    )
                    
                    Text(
                        text = "Chunk Delay: ${chunkDelayMs}ms",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    
                    Slider(
                        value = chunkDelayMs.toFloat(),
                        onValueChange = { chunkDelayMs = it.toInt() },
                        valueRange = 0f..50f,
                        steps = 9,
                        modifier = Modifier.fillMaxWidth(),
                        onValueChangeFinished = { saveSettings() }
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Test Controls
            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Test Controls",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Button(
                        onClick = { 
                            // Force send current album art with current settings
                            bleServerManager.testAlbumArtTransfer()
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Test Album Art Transfer")
                    }
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Button(
                        onClick = { 
                            // Reset to defaults
                            imageFormat = "JPEG"
                            compressionQuality = 85
                            chunkSize = 512
                            chunkDelayMs = 5
                            useBinaryProtocol = true
                            imageSize = 300
                            saveSettings()
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Text("Reset to Defaults")
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Info Card
            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Transfer Statistics",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    val estimatedSize = when(imageFormat) {
                        "JPEG" -> (imageSize * imageSize * 3 * compressionQuality / 100 / 8).toInt()
                        "WEBP" -> (imageSize * imageSize * 3 * compressionQuality / 100 / 10).toInt()
                        else -> imageSize * imageSize * 3
                    }
                    
                    val chunksNeeded = (estimatedSize + chunkSize - 1) / chunkSize
                    val transferTime = if (useBinaryProtocol) {
                        chunksNeeded * chunkDelayMs
                    } else {
                        chunksNeeded * chunkDelayMs + (estimatedSize * 0.33).toInt() // Base64 overhead
                    }
                    
                    Text(
                        text = "Estimated file size: ${estimatedSize / 1024}KB",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = "Chunks needed: $chunksNeeded",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = "Estimated transfer time: ${transferTime}ms",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }
        }
    }